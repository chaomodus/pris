#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2015, 6, 24, 17, 33, 22, 2)

__all__ = [
    'prisParser',
    'prisSemantics',
    'main'
]


class prisParser(Parser):
    def __init__(self, whitespace=None, nameguard=None, **kwargs):
        super(prisParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re='^#.?$',
            eol_comments_re='#.*?$',
            ignorecase=None,
            **kwargs
        )

    @graken()
    def _start_(self):

        def block0():
            with self._group():
                with self._choice():
                    with self._option():
                        with self._group():
                            self._tl_directive_()
                            self.ast['@'] = self.last_node
                            self._eol_()
                    with self._option():
                        self._tl_keyvalue_()
                        self.ast['@'] = self.last_node
                        with self._optional():
                            self._token(',')
                    with self._option():
                        self._tl_nulllist_()
                        self.ast['@'] = self.last_node
                    with self._option():
                        self._tl_nulldict_()
                        self.ast['@'] = self.last_node
                    with self._option():
                        self._tl_listvalue_()
                        self.ast['@'] = self.last_node
                    with self._option():
                        self._tl_dictvalue_()
                        self.ast['@'] = self.last_node
                    with self._option():
                        self._tl_value_()
                        self.ast['@'] = self.last_node
                    self._error('no available options')
        self._closure(block0)

    @graken()
    def _directive_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._PARAMDIRECTIVE_()
                with self._option():
                    self._token('reset')
                with self._option():
                    self._token('nofold')
                self._error('expecting one of: nofold reset')
        self.ast['directive'] = self.last_node

        self.ast._define(
            ['directive'],
            []
        )

    @graken()
    def _PARAMDIRECTIVE_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._token('include')
                with self._option():
                    self._token('encoding')
                self._error('expecting one of: encoding include')
        self._string_()

    @graken()
    def _key_(self):
        with self._choice():
            with self._option():
                self._bool_()
            with self._option():
                self._atom_()
            with self._option():
                self._string_()
            with self._option():
                self._simplenumber_()
            with self._option():
                self._hexnumber_()
            self._error('no available options')

    @graken()
    def _value_(self):
        with self._choice():
            with self._option():
                self._null_()
            with self._option():
                self._hexnumber_()
            with self._option():
                self._decnumber_()
            with self._option():
                self._string_()
            with self._option():
                self._bool_()
            with self._option():
                self._nulldict_()
            with self._option():
                self._nulllist_()
            with self._option():
                self._listvalue_()
            with self._option():
                self._dictvalue_()
            self._error('no available options')

    @graken()
    def _string_(self):
        self._base_string_()
        self.ast['string'] = self.last_node

        self.ast._define(
            ['string'],
            []
        )

    @graken()
    def _bool_(self):
        self._base_bool_()
        self.ast['bool'] = self.last_node

        self.ast._define(
            ['bool'],
            []
        )

    @graken()
    def _null_(self):
        self._base_null_()
        self.ast['null'] = self.last_node

        self.ast._define(
            ['null'],
            []
        )

    @graken()
    def _atom_(self):
        self._base_atom_()
        self.ast['atom'] = self.last_node

        self.ast._define(
            ['atom'],
            []
        )

    @graken()
    def _decnumber_(self):
        self._base_decnumber_()
        self.ast['decnumber'] = self.last_node

        self.ast._define(
            ['decnumber'],
            []
        )

    @graken()
    def _hexnumber_(self):
        self._base_hexnumber_()
        self.ast['hexnumber'] = self.last_node

        self.ast._define(
            ['hexnumber'],
            []
        )

    @graken()
    def _simplenumber_(self):
        self._base_simplenumber_()
        self.ast['simplenumber'] = self.last_node

        self.ast._define(
            ['simplenumber'],
            []
        )

    @graken()
    def _listvalue_(self):
        self._base_listvalue_()
        self.ast['iter'] = self.last_node

        self.ast._define(
            ['iter'],
            []
        )

    @graken()
    def _dictvalue_(self):
        self._base_dictvalue_()
        self.ast['iter'] = self.last_node

        self.ast._define(
            ['iter'],
            []
        )

    @graken()
    def _nulllist_(self):
        self._base_null_list_()
        self.ast['nulliter'] = self.last_node

        self.ast._define(
            ['nulliter'],
            []
        )

    @graken()
    def _nulldict_(self):
        self._base_null_dict_()
        self.ast['nulliter'] = self.last_node

        self.ast._define(
            ['nulliter'],
            []
        )

    @graken()
    def _base_listvalue_(self):
        with self._choice():
            with self._option():
                self._token('[')
                self._cut()

                def block0():
                    self._tl_value_()
                    self.ast['@'] = self.last_node
                    with self._optional():
                        self._token(',')
                self._closure(block0)
                self._token(']')
            with self._option():
                self._token('(')
                self._cut()

                def block2():
                    self._tl_value_()
                    self.ast['@'] = self.last_node
                    with self._optional():
                        self._token(',')
                self._closure(block2)
                self._token(')')
            self._error('expecting one of: ( [')

    @graken()
    def _base_dictvalue_(self):
        self._token('{')
        self._cut()

        def block0():
            self._tl_keyvalue_()
            self.ast['@'] = self.last_node
            with self._optional():
                self._token(',')
        self._closure(block0)
        self._token('}')

    @graken()
    def _base_bool_(self):
        with self._choice():
            with self._option():
                self._token('yes')
            with self._option():
                self._token('no')
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            with self._option():
                self._token('True')
            with self._option():
                self._token('False')
            with self._option():
                self._token('TRUE')
            with self._option():
                self._token('FALSE')
            with self._option():
                self._token('t')
            with self._option():
                self._token('f')
            self._error('expecting one of: FALSE False TRUE True f false no t true yes')

    @graken()
    def _base_null_(self):
        with self._choice():
            with self._option():
                self._token('None')
            with self._option():
                self._token('null')
            with self._option():
                self._token('void')
            with self._option():
                self._token('nil')
            with self._option():
                self._token('NULL')
            self._error('expecting one of: NULL None nil null void')

    @graken()
    def _base_atom_(self):
        self._pattern(r'[A-Za-z_][A-Za-z0-9_-]?')

    @graken()
    def _base_sstring_(self):
        self._token("'")
        self._cut()

        def block1():
            with self._choice():
                with self._option():
                    self._pattern(r"[^'\\]")
                with self._option():
                    self._escapes_()
                self._error("expecting one of: [^'\\\\]")
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._token("'")

    @graken()
    def _base_dstring_(self):
        self._token('"')
        self._cut()

        def block1():
            with self._choice():
                with self._option():
                    self._pattern(r'[^"\\]')
                with self._option():
                    self._escapes_()
                self._error('expecting one of: [^"\\\\]')
        self._closure(block1)
        self.ast['@'] = self.last_node
        self._token('"')

    @graken()
    def _base_string_(self):
        with self._choice():
            with self._option():
                self._base_sstring_()
            with self._option():
                self._base_dstring_()
            self._error('no available options')

    @graken()
    def _escapes_(self):
        with self._choice():
            with self._option():
                self._pattern(r'\\[\'"\\nrtbfv]')
            with self._option():
                self._pattern(r'\\u[a-fA-F0-9]{4}')
            self._error('expecting one of: \\\\[\'"\\\\nrtbfv] \\\\u[a-fA-F0-9]{4}')

    @graken()
    def _base_simplenumber_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _base_decnumber_(self):
        self._pattern(r'-?[0-9]+(\.[0-9]+)?(e[0-9]+)?')

    @graken()
    def _base_hexnumber_(self):
        self._pattern(r'0x[0-9A-Fa-f]+')

    @graken()
    def _base_null_dict_(self):
        self._token('{')
        self._token('}')

    @graken()
    def _base_null_list_(self):
        with self._choice():
            with self._option():
                self._token('[')
                self._token(']')
            with self._option():
                self._token('(')
                self._token(')')
            self._error('expecting one of: ( [')

    @graken()
    def _base_kvp_(self):
        with self._group():
            self._key_()
            self.ast['@'] = self.last_node
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('=')
                    with self._option():
                        self._token(':')
                    self._error('expecting one of: : =')
            self._value_()
            self.ast['@'] = self.last_node

    @graken()
    def _eol_(self):
        with self._group():

            def block0():
                with self._choice():
                    with self._option():
                        self._token('\r')
                    with self._option():
                        self._token('\n')
                    self._error('expecting one of: \n \r')
            self._closure(block0)

    @graken()
    def _tl_keyvalue_(self):
        self._base_kvp_()
        self.ast['kvp'] = self.last_node

        self.ast._define(
            ['kvp'],
            []
        )

    @graken()
    def _tl_value_(self):
        self._value_()

    @graken()
    def _tl_directive_(self):
        self._token('?')
        self._directive_()
        self.ast['@'] = self.last_node

    @graken()
    def _tl_listvalue_(self):
        self._listvalue_()

    @graken()
    def _tl_dictvalue_(self):
        self._dictvalue_()

    @graken()
    def _tl_nulllist_(self):
        self._nulllist_()

    @graken()
    def _tl_nulldict_(self):
        self._nulldict_()


class prisSemantics(object):
    def start(self, ast):
        return ast

    def directive(self, ast):
        return ast

    def PARAMDIRECTIVE(self, ast):
        return ast

    def key(self, ast):
        return ast

    def value(self, ast):
        return ast

    def string(self, ast):
        return ast

    def bool(self, ast):
        return ast

    def null(self, ast):
        return ast

    def atom(self, ast):
        return ast

    def decnumber(self, ast):
        return ast

    def hexnumber(self, ast):
        return ast

    def simplenumber(self, ast):
        return ast

    def listvalue(self, ast):
        return ast

    def dictvalue(self, ast):
        return ast

    def nulllist(self, ast):
        return ast

    def nulldict(self, ast):
        return ast

    def base_listvalue(self, ast):
        return ast

    def base_dictvalue(self, ast):
        return ast

    def base_bool(self, ast):
        return ast

    def base_null(self, ast):
        return ast

    def base_atom(self, ast):
        return ast

    def base_sstring(self, ast):
        return ast

    def base_dstring(self, ast):
        return ast

    def base_string(self, ast):
        return ast

    def escapes(self, ast):
        return ast

    def base_simplenumber(self, ast):
        return ast

    def base_decnumber(self, ast):
        return ast

    def base_hexnumber(self, ast):
        return ast

    def base_null_dict(self, ast):
        return ast

    def base_null_list(self, ast):
        return ast

    def base_kvp(self, ast):
        return ast

    def eol(self, ast):
        return ast

    def tl_keyvalue(self, ast):
        return ast

    def tl_value(self, ast):
        return ast

    def tl_directive(self, ast):
        return ast

    def tl_listvalue(self, ast):
        return ast

    def tl_dictvalue(self, ast):
        return ast

    def tl_nulllist(self, ast):
        return ast

    def tl_nulldict(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = prisParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in prisParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for pris.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )
